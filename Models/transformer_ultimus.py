# -*- coding: utf-8 -*-
"""transformer_ultimus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NdIeXGyY2B9Ppfva6li8_rIwMuHtPaoB
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import math
from torchsummary import summary
from einops import rearrange, repeat
#Residual block
class UltimusBlock(nn.Module):
    

    def __init__(self):
        super(UltimusBlock, self).__init__()
        # key,query,value matrix
        self.Q = nn.Linear(48, 8 ,bias =False)
        self.K=  nn.Linear(48, 8, bias =False)
        self.V =  nn.Linear(48, 8, bias =False)
        self.Out = nn.Linear(8,48)


    def forward(self, x):
        
        
        Q= self.Q(x)
        K= self.K(x)
        V= self.V(x)
        #print(Q.shape)
        self.AM = F.softmax(torch.matmul(Q, K.t()) / (8 ** 0.5), dim=-1)
        self.Z = torch.matmul(self.AM, V)
        Out= self.Out(self.Z)
        return Out

class TransformerBlock(nn.Module):
    def __init__(self, UltimusBlock):
        super(TransformerBlock, self).__init__()

        # convolution block 1
        self.conv1 = nn.Sequential(
                        nn.Conv2d(3, 16, kernel_size = 3),# input : 32 * 32 *3  output : 30 * 30 * 16
                        nn.Conv2d(16,32, kernel_size = 3), # input : 30 * 30 * 16 output : 28 * 28 * 32
                        nn.Conv2d(32, 48, kernel_size = 3)) # input : 28 * 28 * 32  output : 26 * 26 * 48
                        # nn.BatchNorm2d(48),
                        # nn.ReLU()) # input : 32 * 32 *3 ,output : 32 * 32 *64

        # gap
        self.gap= nn.AvgPool2d((26,26))
        self.U1 = UltimusBlock()
        self.U2 = UltimusBlock()
        self.U3 = UltimusBlock()
        self.U4 = UltimusBlock()
        self.fc = nn.Linear(48,10)



    def forward(self, x):
        out = self.conv1(x)
        X = self.gap(out)
        # X = torch.squeeze(X)
        X = X.view(X.size(0), -1)
        #print(X.shape)
        U1 = self.U1(X)
        U2 = self.U2(U1)
        U3 = self.U3(U2)
        U4 = self.U4(U3)
        fc = self.fc(U4)

        
        return X